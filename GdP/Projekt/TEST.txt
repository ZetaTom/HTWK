Anmerkung: Dokumente sind mit Tabulatorbreite 4 verfasst
   >|<
	^


Klassen
·KomplexeZahl
	·komplex.hpp und komplex.cpp
·KomplexND
	·komplexnd.hpp und komplexnd.cpp


Zum Testen der Implementierung der beiden Klassen, habe ich zwei kleine Programme geschrieben.
Um die Funktionalität der Klasse „KomplexeZahl“ zu überprüfen, werden beide benötigt.

Das Programm pncalc.cpp ist ein einfacher Taschenrechner, der in polnischer Notation mit komplexen Zahlen rechnet.
Es ist in der Lage, einfache Ausdrücke, Rechnungen und Konvertierungen auszuwerten. Dabei wird Folgendes unterstützt:
	Operatoren:	{+, -, *} KomplexeZahl KomplexeZahl
				{+, -, *} KomplexeZahl double (wird in Realteil konvertiert)

	Konvertierungen:	>polar		gibt die Polarkoordinaten als komplexe Zahl zurück
									Realteil		= Betrag
									Imaginärteil	= Winkel (Phi) im Bogenmaß
						>mag		gibt Betrag als Realteil zurück
						>phi		gibt Winkel als Realteil zurück
						>=			prüft zwei Zahlen auf Gleichheit
									gibt boolschen Wert als Realteil zurück
						>!			negiert boolsche Aussage
									(prüft, ob Betrag der Zahl nicht > 0 ist)
									gibt boolschen Wert als Realteil zurück

	Eingabeformat:	Komplexe Zahl:	4.5 - 2.445*i wird als ( 4.5 -2.445 ) geschrieben
					Reale Zahl:		42

Beim Aufruf wird der Benutzer um eine Eingabe gebeten: „$> “. Das Ergebnis erscheint nach: „>>> “.
Bei falscher Eingabe erscheint eine Fehlermeldung.

Mit diesem Programm können die meisten Fälle und Operationen überprüft werden.
Einige Versuche:

Eingabe					|Ausgabe				|Erwartete Ausgabe
––––––––––––––––––––––––+–––––––––––––––––––––––+––––––––––––––––––
+ ( 42 3 ) ( 8 -7 )		| ( 50 -4 )				| 50 - 4i
* ( 42 3.3 ) 400		| ( 16800 1320 )		| 16800 + 1320i
* ( 2 56 ) ( -4 9.22)	| ( -524.32 -205.56 )	| -524.32 - 205.56i
>polar ( 0 0 )			| ( 0 0 )				| r = 0, φ = 0
>polar ( 1 1 )			| ( 1.41421 0.785398 )	| r = √2, φ = 45°
>polar ( -1 0 )			| ( 1 3.14159 )			| r = 1, φ = 180°
>polar ( 0 -1 )			| ( 1 -1.5708 )			| r = 1, φ = -90°




Die restlichen Funktionen bzw. Methoden von KomplexeZahl und von KomplexND können automatisiert mit dem Programm
test.cpp überprüft werden.
Das Programm durchläuft mehrere Abschnitte, in denen die unterschiedlichen Funktionen geprüft werden.
In diesen Abschnitten befinden sich meist Zählschleifen, welche unterschiedliche Werte in die Funktionen einsetzen und
das Ergebnis mit Hilfe der Funktion ass(a, b) vergleichen.
Es sollte angemerkt werden, dass die Tests „Test construction of large vectors“ und „2. Test construction of large vectors“
in etwa 5 - 8GB Arbeitsspeicher belegen können. Die Größe des Vektors a kann herabgesetzt werden, um eventuelle Probleme
zu verhindern. (Zeilen 197, 220, 246)

Läuft ein Test fehlerfrei durch erscheint z.B.:
	============================================================
	Module:   KomplexeZahl
	Function: getPhi(), toPolar()
	Test:     Calculate Argument
	------------------------------------------------------------
	TEST PASSED!
	>>> Testing edge cases <<<
	TEST PASSED!

Hat das Programm alle Tests fehlerfrei durchlaufen, erscheint Folgendes:
	>>> All tests passed! Exiting <<<
und das Programm wird kontrolliert beendet.

Falls ein Fehler aufgetreten ist, sollte wird das Programm beendet und es erscheint:
	############################################################
	######################  TEST  FAILED  ######################
	############################################################
Dies ist bei meinen Versuchen (auf meinen PC und den Hochschulrechnern) jedoch nicht vorgekommen.

